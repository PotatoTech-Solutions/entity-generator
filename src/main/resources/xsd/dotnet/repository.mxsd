using <<projetcName>>.Config.Database;
using Microsoft.EntityFrameworkCore;

namespace <<projetcName>>.<<nameSpaceName>>
{
    public class <<entityName>>Repository : I<<entityName>>Repository
    {
        public ApiDbContext _context;

        public <<entityName>>Repository(ApiDbContext context)
        {
            _context = context;
        }

        public virtual <<entityName>>Entity Add(<<entityName>>Entity obj)
        {
            try
            {
                _context.Set<<<entityName>>Entity>().Add(obj);
                _context.SaveChanges();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public virtual ResponseData GetAll(RequestData input)
        {
            var output = new ResponseData();
            IQueryable<<<entityName>>Entity> query = _context.<<entityName>>Context;

            if (!input.displayFields.Equals(""))
            {
                var displays = input.displayFields.Split(";").ToList();
                displays.ForEach(e =>
                {
                    query = query.Include(e);
                });
            }

            var totalRegistry = query.Count();
            var totalPages = (int)Math.Ceiling(totalRegistry / (double)input.size);

            var itens = query.OrderBy(p => p.Id).Skip((1-input.offset) * input.size).Take(input.size).ToList();

            output.total = totalRegistry;
            output.offset = input.offset;
            output.size = totalPages;
            output.contents = <<entityName>>DTOConverter.ToDTO(itens);

            return output;
        }

        public virtual <<entityName>>Entity FindById(int id, string displayFields = "")
        {
            IQueryable<<<entityName>>Entity> query = _context.<<entityName>>Context;
            if (displayFields != null && !displayFields.Equals(""))
            {
                var displays = displayFields.Split(";").ToList();
                displays.ForEach(e =>
                {
                    query = query.Include(e);
                });
            }

            return query.SingleOrDefault(p => p.Id == id);
        }

        public virtual void Delete(int id)
        {
            try
            {
                var obj = _context.Set<<<entityName>>Entity>().Find(id);
                _context.Remove(obj);
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual <<entityName>>Entity Update(int id, <<entityName>>Entity obj)
        {
            try
            {
                _context.ChangeTracker.AutoDetectChangesEnabled = true;
                _context.Update(obj);
                _context.SaveChanges();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}

