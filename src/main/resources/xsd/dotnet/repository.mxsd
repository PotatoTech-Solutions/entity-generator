using Microsoft.EntityFrameworkCore;

namespace <<projetcName>>.<<nameSpaceName>>
{
    public class <<entityName>>Repository : I<<entityName>>Repository
    {
        public CustomDbContext _context;

        public <<entityName>>Repository(CustomDbContext context)
        {
            _context = context;
        }

        public virtual <<entityName>>Entity Add(<<entityName>>Entity obj)
        {
            try
            {
                _context.Set<<<entityName>>Entity>().Add(obj);
                _context.SaveChanges();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public virtual List<<<entityName>>Entity> GetAll()
        {
            string order = "name";
            return _context.<<entityName>>Context.Skip((1-1) * 10).Take(10).ToList();
        }

        public virtual <<entityName>>Entity FindById(int id)
        {
            return _context.Set<<<entityName>>Entity>().Find(id);
        }

        public virtual void Delete(int id)
        {
            try
            {
                var obj = _context.Set<<<entityName>>Entity>().Find(id);
                _context.Remove(obj);
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual <<entityName>>Entity Update(int id, <<entityName>>Entity obj)
        {
            try
            {
                _context.Attach(obj);
                _context.Entry(obj).State = EntityState.Modified;
                _context.SaveChanges();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}

