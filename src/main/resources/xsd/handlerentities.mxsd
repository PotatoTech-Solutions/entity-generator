package <<packageName>>;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("<<entityNameLowerCase>>")
public class <<entityName>>Handler implements HandlerBase<<<entityName>>DTO, UUID> {

    @Autowired
    <<entityName>>Repository repository;

    @Autowired
    <<entityName>>DTOConverter dtoConverter;

    @Autowired
    SpecificationFilter<<<entityName>>Entity> especificationFilter;

    @Override
    public <<entityName>>DTO save(<<entityName>>DTO obj) {
        var entity = dtoConverter.toEntity(obj);
        entity = repository.save(entity);
        return dtoConverter.toDTO(entity);
    }

    @Override
    public <<entityName>>DTO update(<<entityName>>DTO obj, UUID id) {
        var entity = dtoConverter.toEntity(obj);
        entity.setId(id);
        entity = repository.save(entity);
        return dtoConverter.toDTO(entity);
    }

    @Override
    public void delete(UUID id) {
        repository.deleteById(id);
    }

    @Override
    public <<entityName>>DTO get(UUID id) {
        return dtoConverter.toDTO(repository.getReferenceById(id));
    }

    @Override
    public ResponseData getAll(RequestData input) {

         if(input.offset <= 0){
             input.offset = 1;
         }
         input.offset--;
         Pageable pageable = PageRequest.of(input.offset , input.size);
         var spec = especificationFilter.customFilter(input.filter);
         var ret = repository.findAll(spec, pageable);

         var output = new ResponseData();
         output.total = Integer.parseInt(String.valueOf(ret.getTotalElements()));
         output.contents = ret.get();
         output.size = ret.getSize();
         output.offset = input.offset;
         return output;
    }
}